/* The following code was generated by JFlex 1.7.0 */

package klx.parser;
import java.io.FileReader;
import java.io.StringReader;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import klx.Token;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>klx.flex</tt>
 */
public class Scanner implements Parser.Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  public static final int REGEX = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\71\1\72\1\1\22\0\1\3\1\60\1\15"+
    "\2\0\1\70\1\64\1\14\1\46\1\47\1\5\1\66\1\54\1\12"+
    "\1\11\1\4\1\10\1\10\2\10\4\13\2\7\1\63\1\53\1\57"+
    "\1\55\1\56\1\62\1\0\1\6\1\6\1\6\1\6\1\6\1\6"+
    "\1\6\1\6\6\6\1\6\13\6\1\51\1\16\1\52\1\67\1\6"+
    "\1\0\1\20\1\23\1\26\1\22\1\31\1\32\1\41\1\45\1\33"+
    "\1\6\1\40\1\25\1\36\1\21\1\24\1\37\1\6\1\35\1\27"+
    "\1\30\1\43\1\42\1\44\1\34\2\6\1\50\1\65\1\17\1\61"+
    "\6\0\1\71\u1fa2\0\1\71\1\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\17\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\2\37\1\40\2\1\2\41\1\1\1\36\2\42\1\1"+
    "\1\43\1\44\1\0\1\45\1\46\1\47\1\50\1\51"+
    "\5\5\1\52\12\5\1\53\7\5\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\0\1\71\1\72\2\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\12\72"+
    "\1\105\2\44\1\0\1\106\1\107\1\110\1\111\11\5"+
    "\1\112\1\5\1\113\5\5\1\114\2\5\1\115\1\116"+
    "\1\117\1\120\1\73\1\0\1\121\1\0\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\1\131\1\132\3\5"+
    "\1\133\1\134\1\135\14\5\1\136\1\137\1\140\2\5"+
    "\1\141\1\142\10\5\1\143\1\144\2\5\1\145\4\5"+
    "\1\146\1\147\1\150\2\5\1\151\1\5\1\152\3\5"+
    "\1\153\1\5\1\154\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\354\0\u0127\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\354\0\354\0\354\0\u024e\0\u0289"+
    "\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461"+
    "\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\354\0\354\0\354"+
    "\0\354\0\354\0\354\0\354\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\354\0\354\0\354\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b"+
    "\0\u07d6\0\u0811\0\354\0\354\0\u084c\0\u0887\0\u08c2\0\354"+
    "\0\u08fd\0\u0938\0\u0973\0\354\0\u09ae\0\354\0\u09e9\0\u0a24"+
    "\0\354\0\354\0\354\0\354\0\354\0\u0a5f\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\u019d\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72"+
    "\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u019d\0\u0dd4\0\u0e0f"+
    "\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\354\0\354\0\u0f71"+
    "\0\354\0\u0fac\0\354\0\354\0\354\0\354\0\354\0\354"+
    "\0\354\0\354\0\u0fe7\0\354\0\354\0\u1022\0\u105d\0\354"+
    "\0\354\0\354\0\354\0\354\0\354\0\354\0\354\0\354"+
    "\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235"+
    "\0\u1270\0\u12ab\0\354\0\u12e6\0\354\0\u1321\0\u019d\0\u019d"+
    "\0\u019d\0\u019d\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483"+
    "\0\u14be\0\u14f9\0\u1534\0\u019d\0\u156f\0\u15aa\0\u15e5\0\u1620"+
    "\0\u165b\0\u1696\0\u16d1\0\u019d\0\u170c\0\u1747\0\354\0\u1782"+
    "\0\354\0\354\0\354\0\u10d3\0\354\0\u17bd\0\354\0\354"+
    "\0\354\0\354\0\354\0\354\0\354\0\354\0\u019d\0\u17f8"+
    "\0\u1833\0\u186e\0\u019d\0\u019d\0\u019d\0\u18a9\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7"+
    "\0\u1b32\0\354\0\u019d\0\u019d\0\u1b6d\0\u1ba8\0\u019d\0\u019d"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80"+
    "\0\u019d\0\u019d\0\u1dbb\0\u1df6\0\u019d\0\u1e31\0\u1e6c\0\u1ea7"+
    "\0\u1ee2\0\u019d\0\u019d\0\u019d\0\u1f1d\0\u1f58\0\u019d\0\u1f93"+
    "\0\u019d\0\u1fce\0\u2009\0\u2044\0\u019d\0\u207f\0\u019d\0\u019d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\5\1\6\1\7\1\10\1\11\2\5\1\12\1\13"+
    "\1\5\1\14\1\15\1\5\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\11\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\3\11\1\32\2\11\1\33\1\34\1\35\1\11"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\5\1\6\1\61\1\62\1\63"+
    "\12\61\1\64\1\65\54\61\1\66\1\67\1\70\11\66"+
    "\1\5\1\66\1\71\54\66\1\72\1\73\1\74\13\72"+
    "\1\75\1\76\53\72\77\0\1\77\1\100\47\0\1\101"+
    "\72\0\1\102\23\0\3\11\2\0\1\11\4\0\26\11"+
    "\36\0\1\103\73\0\1\104\42\0\1\105\23\0\3\11"+
    "\2\0\1\11\4\0\1\11\1\106\24\11\33\0\3\11"+
    "\2\0\1\11\4\0\4\11\1\107\6\11\1\110\12\11"+
    "\33\0\3\11\2\0\1\11\4\0\11\11\1\111\14\11"+
    "\33\0\3\11\2\0\1\11\4\0\4\11\1\112\21\11"+
    "\33\0\3\11\2\0\1\11\4\0\15\11\1\113\10\11"+
    "\33\0\3\11\2\0\1\11\4\0\4\11\1\114\1\115"+
    "\20\11\33\0\3\11\2\0\1\11\4\0\10\11\1\116"+
    "\15\11\33\0\3\11\2\0\1\11\4\0\15\11\1\117"+
    "\10\11\33\0\3\11\2\0\1\11\4\0\5\11\1\120"+
    "\6\11\1\121\11\11\33\0\3\11\2\0\1\11\4\0"+
    "\1\122\3\11\1\123\1\124\20\11\33\0\3\11\2\0"+
    "\1\11\4\0\1\11\1\125\10\11\1\126\3\11\1\127"+
    "\7\11\33\0\3\11\2\0\1\11\4\0\1\130\14\11"+
    "\1\131\5\11\1\132\2\11\33\0\3\11\2\0\1\11"+
    "\4\0\1\133\25\11\33\0\3\11\2\0\1\11\4\0"+
    "\1\11\1\134\24\11\33\0\3\11\2\0\1\11\4\0"+
    "\25\11\1\135\102\0\1\136\72\0\1\137\1\140\71\0"+
    "\1\141\1\0\1\142\70\0\1\143\72\0\1\144\6\0"+
    "\1\145\63\0\1\146\7\0\1\147\62\0\1\150\10\0"+
    "\1\151\61\0\1\152\52\0\1\153\17\0\1\154\15\0"+
    "\1\61\2\0\12\61\2\0\54\61\2\0\1\63\70\0"+
    "\1\155\2\0\5\155\1\156\2\155\1\157\1\160\1\161"+
    "\1\162\2\155\1\163\1\155\1\164\4\155\1\165\1\155"+
    "\1\166\2\155\1\167\33\155\16\0\1\170\60\0\1\70"+
    "\70\0\1\155\2\0\5\155\1\171\2\155\1\172\1\173"+
    "\1\174\1\175\2\155\1\176\1\155\1\177\4\155\1\200"+
    "\1\155\1\201\2\155\1\202\33\155\2\0\1\72\2\0"+
    "\13\72\2\0\53\72\2\0\1\74\70\0\1\155\2\0"+
    "\14\155\1\203\51\155\2\0\1\77\1\204\1\205\70\77"+
    "\5\100\1\206\65\100\6\0\3\11\2\0\1\11\4\0"+
    "\2\11\1\207\23\11\33\0\3\11\2\0\1\11\4\0"+
    "\10\11\1\210\15\11\33\0\3\11\2\0\1\11\4\0"+
    "\5\11\1\211\20\11\33\0\3\11\2\0\1\11\4\0"+
    "\12\11\1\212\13\11\33\0\3\11\2\0\1\11\4\0"+
    "\4\11\1\213\21\11\33\0\3\11\2\0\1\11\4\0"+
    "\1\11\1\214\24\11\33\0\3\11\2\0\1\11\4\0"+
    "\1\215\25\11\33\0\3\11\2\0\1\11\4\0\1\216"+
    "\25\11\33\0\3\11\2\0\1\11\4\0\23\11\1\217"+
    "\2\11\33\0\3\11\2\0\1\11\4\0\7\11\1\220"+
    "\3\11\1\221\12\11\33\0\3\11\2\0\1\11\4\0"+
    "\10\11\1\222\15\11\33\0\3\11\2\0\1\11\4\0"+
    "\5\11\1\223\20\11\33\0\3\11\2\0\1\11\4\0"+
    "\15\11\1\224\10\11\33\0\3\11\2\0\1\11\4\0"+
    "\4\11\1\225\21\11\33\0\3\11\2\0\1\11\4\0"+
    "\10\11\1\226\15\11\33\0\3\11\2\0\1\11\4\0"+
    "\17\11\1\227\6\11\33\0\3\11\2\0\1\11\4\0"+
    "\6\11\1\230\17\11\33\0\3\11\2\0\1\11\4\0"+
    "\4\11\1\231\6\11\1\232\12\11\33\0\3\11\2\0"+
    "\1\11\4\0\3\11\1\233\22\11\33\0\3\11\2\0"+
    "\1\11\4\0\15\11\1\234\10\11\33\0\3\11\2\0"+
    "\1\11\4\0\5\11\1\235\20\11\33\0\3\11\2\0"+
    "\1\11\4\0\13\11\1\236\12\11\102\0\1\237\1\240"+
    "\71\0\1\241\65\0\1\242\32\0\1\157\2\0\1\157"+
    "\67\0\1\243\2\0\1\243\67\0\1\244\2\0\1\244"+
    "\1\245\66\0\1\246\2\0\1\246\1\245\72\0\1\247"+
    "\72\0\1\250\72\0\1\251\72\0\1\252\72\0\1\253"+
    "\72\0\1\254\72\0\1\255\72\0\1\256\60\0\1\205"+
    "\70\0\4\100\1\205\1\206\65\100\6\0\3\11\2\0"+
    "\1\11\4\0\5\11\1\257\20\11\33\0\3\11\2\0"+
    "\1\11\4\0\7\11\1\260\16\11\33\0\3\11\2\0"+
    "\1\11\4\0\7\11\1\261\16\11\33\0\3\11\2\0"+
    "\1\11\4\0\10\11\1\262\15\11\33\0\3\11\2\0"+
    "\1\11\4\0\11\11\1\263\14\11\33\0\3\11\2\0"+
    "\1\11\4\0\11\11\1\264\14\11\33\0\3\11\2\0"+
    "\1\11\4\0\12\11\1\265\13\11\33\0\3\11\2\0"+
    "\1\11\4\0\11\11\1\266\14\11\33\0\3\11\2\0"+
    "\1\11\4\0\7\11\1\267\16\11\33\0\3\11\2\0"+
    "\1\11\4\0\1\270\25\11\33\0\3\11\2\0\1\11"+
    "\4\0\11\11\1\271\14\11\33\0\3\11\2\0\1\11"+
    "\4\0\4\11\1\272\1\273\20\11\33\0\3\11\2\0"+
    "\1\11\4\0\20\11\1\274\5\11\33\0\3\11\2\0"+
    "\1\11\4\0\10\11\1\275\15\11\33\0\3\11\2\0"+
    "\1\11\4\0\22\11\1\276\3\11\33\0\3\11\2\0"+
    "\1\11\4\0\5\11\1\277\20\11\33\0\3\11\2\0"+
    "\1\11\4\0\11\11\1\300\14\11\33\0\3\11\2\0"+
    "\1\11\4\0\5\11\1\301\20\11\102\0\1\302\31\0"+
    "\1\245\64\0\3\11\2\0\1\11\4\0\10\11\1\303"+
    "\15\11\33\0\3\11\2\0\1\11\4\0\7\11\1\304"+
    "\16\11\33\0\3\11\2\0\1\11\4\0\13\11\1\305"+
    "\12\11\33\0\3\11\2\0\1\11\4\0\1\11\1\306"+
    "\24\11\33\0\3\11\2\0\1\11\4\0\11\11\1\307"+
    "\14\11\33\0\3\11\2\0\1\11\4\0\10\11\1\310"+
    "\15\11\33\0\3\11\2\0\1\11\4\0\15\11\1\311"+
    "\10\11\33\0\3\11\2\0\1\11\4\0\15\11\1\312"+
    "\10\11\33\0\3\11\2\0\1\11\4\0\11\11\1\313"+
    "\14\11\33\0\3\11\2\0\1\11\4\0\1\314\25\11"+
    "\33\0\3\11\2\0\1\11\4\0\11\11\1\315\14\11"+
    "\33\0\3\11\2\0\1\11\4\0\1\316\25\11\33\0"+
    "\3\11\2\0\1\11\4\0\13\11\1\317\12\11\33\0"+
    "\3\11\2\0\1\11\4\0\7\11\1\320\16\11\33\0"+
    "\3\11\2\0\1\11\4\0\11\11\1\321\14\11\33\0"+
    "\3\11\2\0\1\11\4\0\6\11\1\322\17\11\33\0"+
    "\3\11\2\0\1\11\4\0\2\11\1\323\23\11\33\0"+
    "\3\11\2\0\1\11\4\0\12\11\1\324\13\11\33\0"+
    "\3\11\2\0\1\11\4\0\10\11\1\325\15\11\33\0"+
    "\3\11\2\0\1\11\4\0\16\11\1\326\7\11\33\0"+
    "\3\11\2\0\1\11\4\0\21\11\1\327\4\11\33\0"+
    "\3\11\2\0\1\11\4\0\6\11\1\330\17\11\33\0"+
    "\3\11\2\0\1\11\4\0\10\11\1\331\15\11\33\0"+
    "\3\11\2\0\1\11\4\0\6\11\1\332\17\11\33\0"+
    "\3\11\2\0\1\11\4\0\7\11\1\333\16\11\33\0"+
    "\3\11\2\0\1\11\4\0\7\11\1\334\16\11\33\0"+
    "\3\11\2\0\1\11\4\0\1\335\25\11\33\0\3\11"+
    "\2\0\1\11\4\0\11\11\1\336\14\11\33\0\3\11"+
    "\2\0\1\11\4\0\11\11\1\337\14\11\33\0\3\11"+
    "\2\0\1\11\4\0\10\11\1\340\15\11\33\0\3\11"+
    "\2\0\1\11\4\0\11\11\1\341\14\11\33\0\3\11"+
    "\2\0\1\11\4\0\6\11\1\342\17\11\33\0\3\11"+
    "\2\0\1\11\4\0\1\11\1\343\24\11\33\0\3\11"+
    "\2\0\1\11\4\0\11\11\1\344\14\11\33\0\3\11"+
    "\2\0\1\11\4\0\11\11\1\345\14\11\33\0\3\11"+
    "\2\0\1\11\4\0\10\11\1\346\15\11\33\0\3\11"+
    "\2\0\1\11\4\0\2\11\1\347\23\11\33\0\3\11"+
    "\2\0\1\11\4\0\7\11\1\350\16\11\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8378];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\5\1\3\11\17\1\7\11\4\1\3\11"+
    "\7\1\2\11\3\1\1\11\3\1\1\11\1\1\1\11"+
    "\1\1\1\0\5\11\30\1\2\11\1\1\1\11\1\1"+
    "\10\11\1\0\2\11\2\1\11\11\12\1\1\11\1\1"+
    "\1\11\1\0\30\1\1\11\1\1\3\11\1\0\1\11"+
    "\1\0\10\11\23\1\1\11\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder __string = new StringBuilder();

  public Scanner(String fileName) throws FileNotFoundException {
    __fileName = fileName;
    this.zzReader = new BufferedReader(new FileReader(__fileName));
  }

  public Scanner(String text, boolean unused) {
    __fileName = null;
    this.zzReader = new BufferedReader(new StringReader(text));
  }

  public static Scanner getStringScanner(String text) {
        return new Scanner(text, true);
  }



  @Override
  public Token getLVal() {
    return __lastToken;
  }

  @Override
  public int yylex() throws java.io.IOException {
		__lastToken = __yylex();
		return __lastToken.type;
	}

  @Override
  public void yyerror(String msg) {
	//todo
    throw new RuntimeException(msg);
  }

  private Token getToken(int code, char c) {
    return getToken(code, Character.toString(c));
  }
  private Token getToken(int code, String str) {
    return new Token(code, __fileName, yyline+1, yycolumn+1, str);
  }
  private Token getToken(int code) {
    return getToken(code, yytext());
  }

  private Token __lastToken = null;
  private String __fileName = null;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token __yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return getToken(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
           "\" at line "+yyline+", column "+yycolumn);
            } 
            // fall through
          case 110: break;
          case 2: 
            { /*nothing*/
            } 
            // fall through
          case 111: break;
          case 3: 
            { return getToken(DIV);
            } 
            // fall through
          case 112: break;
          case 4: 
            { return getToken(MULT);
            } 
            // fall through
          case 113: break;
          case 5: 
            { return getToken(IDENT);
            } 
            // fall through
          case 114: break;
          case 6: 
            { return getToken(DOT);
            } 
            // fall through
          case 115: break;
          case 7: 
            { return getToken(MINUS);
            } 
            // fall through
          case 116: break;
          case 8: 
            { yybegin(CHARLITERAL);
            } 
            // fall through
          case 117: break;
          case 9: 
            { yybegin(STRING); __string.setLength(0);
            } 
            // fall through
          case 118: break;
          case 10: 
            { return getToken(RBRACE);
            } 
            // fall through
          case 119: break;
          case 11: 
            { return getToken(LPAREN);
            } 
            // fall through
          case 120: break;
          case 12: 
            { return getToken(RPAREN);
            } 
            // fall through
          case 121: break;
          case 13: 
            { return getToken(LBRACE);
            } 
            // fall through
          case 122: break;
          case 14: 
            { return getToken(LBRACK);
            } 
            // fall through
          case 123: break;
          case 15: 
            { return getToken(RBRACK);
            } 
            // fall through
          case 124: break;
          case 16: 
            { return getToken(SEMICOLON);
            } 
            // fall through
          case 125: break;
          case 17: 
            { return getToken(COMMA);
            } 
            // fall through
          case 126: break;
          case 18: 
            { return getToken(EQ);
            } 
            // fall through
          case 127: break;
          case 19: 
            { return getToken(GT);
            } 
            // fall through
          case 128: break;
          case 20: 
            { return getToken(LT);
            } 
            // fall through
          case 129: break;
          case 21: 
            { return getToken(NOT);
            } 
            // fall through
          case 130: break;
          case 22: 
            { return getToken(COMP);
            } 
            // fall through
          case 131: break;
          case 23: 
            { return getToken(QUESTION);
            } 
            // fall through
          case 132: break;
          case 24: 
            { return getToken(COLON);
            } 
            // fall through
          case 133: break;
          case 25: 
            { return getToken(AND);
            } 
            // fall through
          case 134: break;
          case 26: 
            { return getToken(OR);
            } 
            // fall through
          case 135: break;
          case 27: 
            { return getToken(PLUS);
            } 
            // fall through
          case 136: break;
          case 28: 
            { return getToken(XOR);
            } 
            // fall through
          case 137: break;
          case 29: 
            { return getToken(MOD);
            } 
            // fall through
          case 138: break;
          case 30: 
            { __string.append( yytext() );
            } 
            // fall through
          case 139: break;
          case 31: 
            { throw new RuntimeException("Unterminated string at end of line");
            } 
            // fall through
          case 140: break;
          case 32: 
            { yybegin(YYINITIAL); 
  			return getToken(STRING_LITERAL, __string.toString());
            } 
            // fall through
          case 141: break;
          case 33: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            } 
            // fall through
          case 142: break;
          case 34: 
            { throw new RuntimeException("Unterminated string at end of regex");
            } 
            // fall through
          case 143: break;
          case 35: 
            { yybegin(YYINITIAL); 
  			return getToken(REGEX_LITERAL, __string.toString());
            } 
            // fall through
          case 144: break;
          case 36: 
            { /*todo: accumulate*/
            } 
            // fall through
          case 145: break;
          case 37: 
            { return getToken(DIVEQ);
            } 
            // fall through
          case 146: break;
          case 38: 
            { return getToken(MULTEQ);
            } 
            // fall through
          case 147: break;
          case 39: 
            { return getToken(DOTDOT);
            } 
            // fall through
          case 148: break;
          case 40: 
            { return getToken(MINUSMINUS);
            } 
            // fall through
          case 149: break;
          case 41: 
            { return getToken(MINUSEQ);
            } 
            // fall through
          case 150: break;
          case 42: 
            { return getToken(K_OR);
            } 
            // fall through
          case 151: break;
          case 43: 
            { return getToken(K_IF);
            } 
            // fall through
          case 152: break;
          case 44: 
            { return getToken(EQEQ);
            } 
            // fall through
          case 153: break;
          case 45: 
            { return getToken(GTEQ);
            } 
            // fall through
          case 154: break;
          case 46: 
            { return getToken(RSHIFT);
            } 
            // fall through
          case 155: break;
          case 47: 
            { return getToken(LTEQ);
            } 
            // fall through
          case 156: break;
          case 48: 
            { return getToken(LSHIFT);
            } 
            // fall through
          case 157: break;
          case 49: 
            { return getToken(NOTEQ);
            } 
            // fall through
          case 158: break;
          case 50: 
            { return getToken(ANDEQ);
            } 
            // fall through
          case 159: break;
          case 51: 
            { return getToken(ANDAND);
            } 
            // fall through
          case 160: break;
          case 52: 
            { return getToken(OREQ);
            } 
            // fall through
          case 161: break;
          case 53: 
            { return getToken(OROR);
            } 
            // fall through
          case 162: break;
          case 54: 
            { return getToken(PLUSEQ);
            } 
            // fall through
          case 163: break;
          case 55: 
            { return getToken(PLUSPLUS);
            } 
            // fall through
          case 164: break;
          case 56: 
            { return getToken(XOREQ);
            } 
            // fall through
          case 165: break;
          case 57: 
            { return getToken(MODEQ);
            } 
            // fall through
          case 166: break;
          case 58: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            } 
            // fall through
          case 167: break;
          case 59: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
        __string.append( val );
            } 
            // fall through
          case 168: break;
          case 60: 
            { __string.append( '\'' );
            } 
            // fall through
          case 169: break;
          case 61: 
            { __string.append( '\"' );
            } 
            // fall through
          case 170: break;
          case 62: 
            { __string.append( '\\' );
            } 
            // fall through
          case 171: break;
          case 63: 
            { __string.append( '\n' );
            } 
            // fall through
          case 172: break;
          case 64: 
            { __string.append( '\b' );
            } 
            // fall through
          case 173: break;
          case 65: 
            { __string.append( '\t' );
            } 
            // fall through
          case 174: break;
          case 66: 
            { __string.append( '\f' );
            } 
            // fall through
          case 175: break;
          case 67: 
            { __string.append( '\r' );
            } 
            // fall through
          case 176: break;
          case 68: 
            { yybegin(YYINITIAL); 
		return getToken(CHARACTER_LITERAL, yytext().charAt(0));
            } 
            // fall through
          case 177: break;
          case 69: 
            { __string.append( '}' );
            } 
            // fall through
          case 178: break;
          case 70: 
            { return getToken(K_AND);
            } 
            // fall through
          case 179: break;
          case 71: 
            { return getToken(K_NOT);
            } 
            // fall through
          case 180: break;
          case 72: 
            { return getToken(K_NIL);
            } 
            // fall through
          case 181: break;
          case 73: 
            { return getToken(K_DEF);
            } 
            // fall through
          case 182: break;
          case 74: 
            { return getToken(K_FOR);
            } 
            // fall through
          case 183: break;
          case 75: 
            { return getToken(K_INT);
            } 
            // fall through
          case 184: break;
          case 76: 
            { return getToken(K_VAR);
            } 
            // fall through
          case 185: break;
          case 77: 
            { return getToken(RSHIFTEQ);
            } 
            // fall through
          case 186: break;
          case 78: 
            { return getToken(URSHIFT);
            } 
            // fall through
          case 187: break;
          case 79: 
            { return getToken(LSHIFTEQ);
            } 
            // fall through
          case 188: break;
          case 80: 
            { yybegin(REGEX); __string.setLength(0);
            } 
            // fall through
          case 189: break;
          case 81: 
            { yybegin(YYINITIAL); 
	    int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
	    return getToken(CHARACTER_LITERAL, (char)val);
            } 
            // fall through
          case 190: break;
          case 82: 
            { yybegin(YYINITIAL); return getToken(CHARACTER_LITERAL, '\'');
            } 
            // fall through
          case 191: break;
          case 83: 
            { yybegin(YYINITIAL); return getToken(CHARACTER_LITERAL, '\"');
            } 
            // fall through
          case 192: break;
          case 84: 
            { yybegin(YYINITIAL); return getToken(CHARACTER_LITERAL, '\\');
            } 
            // fall through
          case 193: break;
          case 85: 
            { yybegin(YYINITIAL); return getToken(CHARACTER_LITERAL, '\n');
            } 
            // fall through
          case 194: break;
          case 86: 
            { yybegin(YYINITIAL); return getToken(CHARACTER_LITERAL, '\b');
            } 
            // fall through
          case 195: break;
          case 87: 
            { yybegin(YYINITIAL); return getToken(CHARACTER_LITERAL, '\t');
            } 
            // fall through
          case 196: break;
          case 88: 
            { yybegin(YYINITIAL); return getToken(CHARACTER_LITERAL, '\f');
            } 
            // fall through
          case 197: break;
          case 89: 
            { yybegin(YYINITIAL); return getToken(CHARACTER_LITERAL, '\r');
            } 
            // fall through
          case 198: break;
          case 90: 
            { return getToken(K_BOOL);
            } 
            // fall through
          case 199: break;
          case 91: 
            { return getToken(K_TRUE);
            } 
            // fall through
          case 200: break;
          case 92: 
            { return getToken(K_ELSE);
            } 
            // fall through
          case 201: break;
          case 93: 
            { return getToken(K_ELIF);
            } 
            // fall through
          case 202: break;
          case 94: 
            { return getToken(URSHIFTEQ);
            } 
            // fall through
          case 203: break;
          case 95: 
            { return getToken(K_CONST);
            } 
            // fall through
          case 204: break;
          case 96: 
            { return getToken(K_CLASS);
            } 
            // fall through
          case 205: break;
          case 97: 
            { return getToken(K_FALSE);
            } 
            // fall through
          case 206: break;
          case 98: 
            { return getToken(K_FLOAT);
            } 
            // fall through
          case 207: break;
          case 99: 
            { return getToken(K_WHILE);
            } 
            // fall through
          case 208: break;
          case 100: 
            { return getToken(K_STATIC);
            } 
            // fall through
          case 209: break;
          case 101: 
            { return getoToken(K_IMPORT);
            } 
            // fall through
          case 210: break;
          case 102: 
            { return getToken(K_PUBLIC);
            } 
            // fall through
          case 211: break;
          case 103: 
            { return getToken(K_UNLESS);
            } 
            // fall through
          case 212: break;
          case 104: 
            { return getToken(K_EXTENDS);
            } 
            // fall through
          case 213: break;
          case 105: 
            { return getToken(K_PACKAGE);
            } 
            // fall through
          case 214: break;
          case 106: 
            { return getToken(K_PRIVATE);
            } 
            // fall through
          case 215: break;
          case 107: 
            { return getToken(K_INTERFACE);
            } 
            // fall through
          case 216: break;
          case 108: 
            { return getToken(K_PROTECTED);
            } 
            // fall through
          case 217: break;
          case 109: 
            { return getToken(K_IMPLEMENTS);
            } 
            // fall through
          case 218: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
